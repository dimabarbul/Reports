@model Reports.Demos.MVC.Controllers.CustomFormatController.ViewModel

@{
    ViewBag.Title = "Custom Format";
    Layout = "_Layout";
}

<h2>Custom Format Example</h2>
<p>Score column is formatted in following way: if value is 100, "100" should be displayed, otherwise &mdash; score should be displayed with 2 decimals.</p>

@Html.Raw(Model.ReportTableHtml)

<a asp-action="Download">Download</a>

<div>
    <button class="btn btn-primary" data-toggle="collapse" data-target="#code">Show/hide code</button>
    <div id="code" class="collapse">
        <pre><code class="c#">
        // Property is used to mark cells.
        class CustomFormatProperty : ReportCellProperty { }

        // The property handler processes cells during conversion to Html having custom property added.
        class CustomFormatPropertyHtmlHandler : SingleTypePropertyHandler&lt;CustomFormatProperty, HtmlReportCell&gt;
        {
            protected override void HandleProperty(CustomFormatProperty property, HtmlReportCell cell)
            {
                decimal value = cell.GetValue&lt;decimal&gt;();
                string format = value == 100m ? "F0" : "F2";

                cell.Html = value.ToString(format);
            }
        }

        // The property handler processes cells during conversion to Excel having custom property added.
        class CustomFormatPropertyExcelHandler : SingleTypePropertyHandler&lt;CustomFormatProperty, ExcelReportCell&gt;
        {
            protected override void HandleProperty(CustomFormatProperty property, ExcelReportCell cell)
            {
                cell.NumberFormat = "[=100]0;[&lt;100]0.00";
            }
        }
        </code></pre>
    </div>
</div>
