@model XReports.Demos.Models.Shared.ReportViewModel

@{
    ViewBag.Title = "Named Converters";
    Layout = "_DemoPageLayout";
}

<a asp-action="Download">Download</a>

@section Description
{
    <p>Sometimes you might need to have multiple converters for one type of report. For example, for Html report that will be displayed on website you might want to use Bootstrap classes, but for report sent to email you want to use style attribute. In order to achieve that multiple converters might be registered by name.</p>
}

@section ReportTable
{
@Html.Raw(Model.ReportTableHtml)
}

@section Code
{
    // In Program.cs
    services
        // will be available by injecting IReportConverterFactory&lt;HtmlReportCell&gt;
        // and calling Get("no-handlers")
        .AddReportConverter&lt;HtmlReportCell&gt;("no-handlers")
        // will be available by injecting IReportConverterFactory&lt;ExcelReportCell&gt;
        // and calling Get("no-handlers")
        .AddReportConverter&lt;ExcelReportCell&gt;("no-handlers")
        // default converter will be available by injecting IReportConverter&lt;HtmlReportCell&gt;
        .AddReportConverter&lt;HtmlReportCell&gt;(o =>
        {
            o.AddFromAssembly(typeof(AlignmentPropertyHtmlHandler).Assembly);
        })
        // default converter will be available by injecting IReportConverter&lt;ExcelReportCell&gt;
        .AddReportConverter&lt;ExcelReportCell&gt;(o =>
        {
            o.AddFromAssembly(typeof(AlignmentPropertyExcelHandler).Assembly);
        });

    // In MyController.cs
    private readonly IAttributeBasedBuilder attributeBasedBuilder;
    private readonly IReportConverterFactory&lt;HtmlReportCell&gt; htmlConverterFactory;
    private readonly IReportConverterFactory&lt;ExcelReportCell&gt; excelConverterFactory;
    private readonly IHtmlStringWriter htmlWriter;
    private readonly IEpplusWriter excelWriter;

    public MyController(
        IAttributeBasedBuilder attributeBasedBuilder,
        IReportConverterFactory&lt;HtmlReportCell&gt; htmlConverterFactory,
        IReportConverterFactory&lt;ExcelReportCell&gt; excelConverterFactory,
        IHtmlStringWriter htmlWriter,
        IEpplusWriter excelWriter)
    {
        this.attributeBasedBuilder = attributeBasedBuilder;
        this.htmlConverterFactory = htmlConverterFactory;
        this.excelConverterFactory = excelConverterFactory;
        this.htmlWriter = htmlWriter;
        this.excelWriter = excelWriter;
    }

    private string GetReportHtml()
    {
        IReportTable&lt;ReportCell&gt; reportTable = this.attributeBasedBuilder.BuildSchema&lt;Entity&gt;()
            .BuildReportTable(this.GetData());
        IReportTable&lt;HtmlReportCell&gt; htmlReportTable = this.htmlConverterFactory.Get("no-handlers")
            .Convert(reportTable);
        string html = this.htmlWriter.WriteToString(htmlReportTable);

        return html;
    }

    private Stream GetExcelStream()
    {
        IReportTable&lt;ReportCell&gt; reportTable = this.attributeBasedBuilder.BuildSchema&lt;Entity&gt;()
            .BuildReportTable(this.GetData());
        IReportTable&lt;ExcelReportCell&gt; excelReportTable = this.excelConverterFactory.Get("no-handlers")
            .Convert(reportTable);
        Stream excelStream = this.excelWriter.WriteToStream(excelReportTable);

        return excelStream;
    }

    private class Entity
    {
        [ReportColumn(1, "Full name")]
        public string Name { get; set; }

        [ReportColumn(2, "Score")]
        // DecimalPrecisionAttribute assigns DecimalPrecisionProperty which will be ignored
        // because the "no-handlers" converter does not have any property handler.
        [DecimalPrecision(1)]
        public decimal Score { get; set; }
    }
}
