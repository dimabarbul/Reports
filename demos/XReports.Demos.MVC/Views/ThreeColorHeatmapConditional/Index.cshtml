@model XReports.Demos.MVC.Controllers.EpplusWriterExtensions.ThreeColorHeatmapConditionalController.ViewModel

@{
    ViewBag.Title = "3-Color Heatmap Using Conditional Formatting";
    Layout = "_DemoPageLayout";
}

<a asp-action="Download">Download</a>

@section Description
{
    <p>Conditional formatting capability (as many other Excel features) is not provided out-of-the-box. But to improve Excel report quality, you may extend EpplusWriter.</p>
    <p>In current implementation we use two heatmaps: for Last Score column we highlight values closer to 0 in red, to 5 - in yellow, to 10 - green, for Score column - 0, 50 and 100 respectively. And this is done using conditional formatting in Excel. Which means that if you change cell value in exported document, its color will change as well.</p>
}

@section ReportTable
{
@Html.Raw(Model.ReportTableHtml)
}

@section Code
{
    class ThreeColorHeatmapProperty : ReportCellProperty
    {
        public decimal MinimumValue { get; set; }
        public Color MinimumColor { get; set; }
        public decimal MiddleValue { get; set; }
        public Color MiddleColor { get; set; }
        public decimal MaximumValue { get; set; }
        public Color MaximumColor { get; set; }

        public ThreeColorHeatmapProperty(decimal minimumValue, Color minimumColor, decimal middleValue, Color middleColor, decimal maximumValue, Color maximumColor)
        {
            this.MinimumValue = minimumValue;
            this.MinimumColor = minimumColor;
            this.MiddleValue = middleValue;
            this.MiddleColor = middleColor;
            this.MaximumValue = maximumValue;
            this.MaximumColor = maximumColor;
        }
    }

    private class ConditionalFormattingThreeColorScaleFormatter : EpplusFormatter&lt;ThreeColorHeatmapProperty&gt;
    {
        protected override void Format(ExcelRange worksheetCell, ExcelReportCell cell, ThreeColorHeatmapProperty property)
        {
            IExcelConditionalFormattingThreeColorScale threeColorScale = worksheetCell.ConditionalFormatting.AddThreeColorScale();
            threeColorScale.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;
            threeColorScale.LowValue.Value = (double) property.MinimumValue;
            threeColorScale.LowValue.Color = property.MinimumColor;
            threeColorScale.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Num;
            threeColorScale.MiddleValue.Value = (double) property.MiddleValue;
            threeColorScale.MiddleValue.Color = property.MiddleColor;
            threeColorScale.HighValue.Type = eExcelConditionalFormattingValueObjectType.Num;
            threeColorScale.HighValue.Value = (double) property.MaximumValue;
            threeColorScale.HighValue.Color = property.MaximumColor;
        }
    }

    ThreeColorHeatmapProperty scoreHeatmapProperty = new ThreeColorHeatmapProperty(0, Color.Red, 50, Color.Yellow, 100, Color.Lime);
    ThreeColorHeatmapProperty lastScoreHeatmapProperty = new ThreeColorHeatmapProperty(0, Color.Red, 5, Color.Yellow, 10, Color.Lime);

    VerticalReportSchemaBuilder&lt;Entity&gt; reportBuilder = new VerticalReportSchemaBuilder&lt;Entity&gt;();
    reportBuilder
        .AddColumn("Name", e => e.Name)
        .AddColumn("Last Score", e => e.LastScore)
        .AddProperties(lastScoreHeatmapProperty);
    reportBuilder.AddColumn("Score", e => e.Score)
        .AddProperties(scoreHeatmapProperty);
}
